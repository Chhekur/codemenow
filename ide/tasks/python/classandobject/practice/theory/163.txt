Override!<br><br>Sometimes you'll want one class that inherits from another to not only take on the methods and attributes of its parent, but to override one or more of them.<br><br>class Employee(object):<br>  def __init__(self, name):<br>    self.name = name<br>  def greet(self, other):<br>    print ''Hello, %s'' % other.name<br><br>class CEO(Employee):<br>  def greet(self, other):<br>    print ''Get back to work, %s!'' % other.name<br><br>ceo = CEO(''Emily'')<br>emp = Employee(''Steve'')<br>emp.greet(ceo)<br># Hello, Emily<br>ceo.greet(emp)<br># Get back to work, Steve!<br>Rather than have a separate greet_underling method for our CEO, we override (or re-create) the greet method on top of the base Employee.greet method. This way, we don't need to know what type of Employee we have before we greet another Employee.